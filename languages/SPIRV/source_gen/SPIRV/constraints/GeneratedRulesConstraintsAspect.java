package SPIRV.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.RulesConstraintsAspect;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.constraints.rules.RulesConstraintsDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class GeneratedRulesConstraintsAspect implements RulesConstraintsAspect {
  @Nullable
  @Override
  public RulesConstraintsDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new FunctionDeclaration_ConstraintRules();
      case 1:
        return new OpVariable_ConstraintRules();
      case 2:
        return new StorageClassGeneric_ConstraintRules();
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4d403df5e7f84d28L, 0x822bebededfb9fefL, 0x4a02975cc3b20b8fL), MetaIdFactory.conceptId(0x4d403df5e7f84d28L, 0x822bebededfb9fefL, 0x4a02975cc3accfbeL), MetaIdFactory.conceptId(0x4d403df5e7f84d28L, 0x822bebededfb9fefL, 0x4a02975cc3b6acb1L)).seal();
}
