package SPIRV.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Block;
  private ConceptPresentation props_BlockTerminationInstruction;
  private ConceptPresentation props_Byte;
  private ConceptPresentation props_ConstantInstruction;
  private ConceptPresentation props_Decoration;
  private ConceptPresentation props_EntryPoint;
  private ConceptPresentation props_FunctionTerminationInstruction;
  private ConceptPresentation props_HeaderBlock;
  private ConceptPresentation props_Id;
  private ConceptPresentation props_Instruction;
  private ConceptPresentation props_Literal;
  private ConceptPresentation props_LoopHeader;
  private ConceptPresentation props_MemoryObject;
  private ConceptPresentation props_MemoryObjectDeclaration;
  private ConceptPresentation props_MergeBlock;
  private ConceptPresentation props_MergeInstruction;
  private ConceptPresentation props_Module;
  private ConceptPresentation props_NonSemanticInstruction;
  private ConceptPresentation props_NumericalName;
  private ConceptPresentation props_Object;
  private ConceptPresentation props_OpBranch;
  private ConceptPresentation props_OpBranchConditional;
  private ConceptPresentation props_OpCapability;
  private ConceptPresentation props_OpCode;
  private ConceptPresentation props_OpConstantNull;
  private ConceptPresentation props_OpFunctionCall;
  private ConceptPresentation props_OpKill;
  private ConceptPresentation props_OpLabel;
  private ConceptPresentation props_OpLoopMerge;
  private ConceptPresentation props_OpPhi;
  private ConceptPresentation props_OpPtrAccessChain;
  private ConceptPresentation props_OpReturn;
  private ConceptPresentation props_OpReturnValue;
  private ConceptPresentation props_OpSelecetionMerge;
  private ConceptPresentation props_OpSelect;
  private ConceptPresentation props_OpSwitch;
  private ConceptPresentation props_OpTypeBool;
  private ConceptPresentation props_OpTypeDeviceEvent;
  private ConceptPresentation props_OpTypeEvent;
  private ConceptPresentation props_OpTypeForwardPointer;
  private ConceptPresentation props_OpTypeImage;
  private ConceptPresentation props_OpTypeNamedBarrier;
  private ConceptPresentation props_OpTypeOpaque;
  private ConceptPresentation props_OpTypePipe;
  private ConceptPresentation props_OpTypePipeStorage;
  private ConceptPresentation props_OpTypeQueue;
  private ConceptPresentation props_OpTypeReserveId;
  private ConceptPresentation props_OpTypeReverseId;
  private ConceptPresentation props_OpTypeSampledImage;
  private ConceptPresentation props_OpTypeSampler;
  private ConceptPresentation props_OpTypeVoid;
  private ConceptPresentation props_Operand;
  private ConceptPresentation props_Result;
  private ConceptPresentation props_SelectionHeader;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_TypeAbstract;
  private ConceptPresentation props_TypeAggregate;
  private ConceptPresentation props_TypeArray;
  private ConceptPresentation props_TypeBoolean;
  private ConceptPresentation props_TypeComposite;
  private ConceptPresentation props_TypeFloatingPoint;
  private ConceptPresentation props_TypeImage;
  private ConceptPresentation props_TypeInteger;
  private ConceptPresentation props_TypeLogicalointer;
  private ConceptPresentation props_TypeMatrix;
  private ConceptPresentation props_TypeNumerical;
  private ConceptPresentation props_TypeOpaque;
  private ConceptPresentation props_TypePhysicalPointer;
  private ConceptPresentation props_TypeSampler;
  private ConceptPresentation props_TypeScalar;
  private ConceptPresentation props_TypeStructure;
  private ConceptPresentation props_TypeVector;
  private ConceptPresentation props_VariablePointer;
  private ConceptPresentation props_WordCount;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Block:
        if (props_Block == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Block");
          props_Block = cpb.create();
        }
        return props_Block;
      case LanguageConceptSwitch.BlockTerminationInstruction:
        if (props_BlockTerminationInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BlockTerminationInstruction");
          props_BlockTerminationInstruction = cpb.create();
        }
        return props_BlockTerminationInstruction;
      case LanguageConceptSwitch.Byte:
        if (props_Byte == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Byte");
          props_Byte = cpb.create();
        }
        return props_Byte;
      case LanguageConceptSwitch.ConstantInstruction:
        if (props_ConstantInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConstantInstruction");
          props_ConstantInstruction = cpb.create();
        }
        return props_ConstantInstruction;
      case LanguageConceptSwitch.Decoration:
        if (props_Decoration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Decoration");
          props_Decoration = cpb.create();
        }
        return props_Decoration;
      case LanguageConceptSwitch.EntryPoint:
        if (props_EntryPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EntryPoint");
          props_EntryPoint = cpb.create();
        }
        return props_EntryPoint;
      case LanguageConceptSwitch.FunctionTerminationInstruction:
        if (props_FunctionTerminationInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FunctionTerminationInstruction = cpb.create();
        }
        return props_FunctionTerminationInstruction;
      case LanguageConceptSwitch.HeaderBlock:
        if (props_HeaderBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HeaderBlock");
          props_HeaderBlock = cpb.create();
        }
        return props_HeaderBlock;
      case LanguageConceptSwitch.Id:
        if (props_Id == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Id");
          props_Id = cpb.create();
        }
        return props_Id;
      case LanguageConceptSwitch.Instruction:
        if (props_Instruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Instruction");
          props_Instruction = cpb.create();
        }
        return props_Instruction;
      case LanguageConceptSwitch.Literal:
        if (props_Literal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Literal");
          props_Literal = cpb.create();
        }
        return props_Literal;
      case LanguageConceptSwitch.LoopHeader:
        if (props_LoopHeader == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LoopHeader");
          props_LoopHeader = cpb.create();
        }
        return props_LoopHeader;
      case LanguageConceptSwitch.MemoryObject:
        if (props_MemoryObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemoryObject");
          props_MemoryObject = cpb.create();
        }
        return props_MemoryObject;
      case LanguageConceptSwitch.MemoryObjectDeclaration:
        if (props_MemoryObjectDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemoryObjectDeclaration");
          props_MemoryObjectDeclaration = cpb.create();
        }
        return props_MemoryObjectDeclaration;
      case LanguageConceptSwitch.MergeBlock:
        if (props_MergeBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeBlock");
          props_MergeBlock = cpb.create();
        }
        return props_MergeBlock;
      case LanguageConceptSwitch.MergeInstruction:
        if (props_MergeInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeInstruction");
          props_MergeInstruction = cpb.create();
        }
        return props_MergeInstruction;
      case LanguageConceptSwitch.Module:
        if (props_Module == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A single unit of SPIR-V");
          cpb.rawPresentation("Module");
          props_Module = cpb.create();
        }
        return props_Module;
      case LanguageConceptSwitch.NonSemanticInstruction:
        if (props_NonSemanticInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NonSemanticInstruction");
          props_NonSemanticInstruction = cpb.create();
        }
        return props_NonSemanticInstruction;
      case LanguageConceptSwitch.NumericalName:
        if (props_NumericalName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NumericalName");
          props_NumericalName = cpb.create();
        }
        return props_NumericalName;
      case LanguageConceptSwitch.Object:
        if (props_Object == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Object");
          props_Object = cpb.create();
        }
        return props_Object;
      case LanguageConceptSwitch.OpBranch:
        if (props_OpBranch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpBranch");
          props_OpBranch = cpb.create();
        }
        return props_OpBranch;
      case LanguageConceptSwitch.OpBranchConditional:
        if (props_OpBranchConditional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpBranchConditional");
          props_OpBranchConditional = cpb.create();
        }
        return props_OpBranchConditional;
      case LanguageConceptSwitch.OpCapability:
        if (props_OpCapability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpCapability");
          props_OpCapability = cpb.create();
        }
        return props_OpCapability;
      case LanguageConceptSwitch.OpCode:
        if (props_OpCode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpCode");
          props_OpCode = cpb.create();
        }
        return props_OpCode;
      case LanguageConceptSwitch.OpConstantNull:
        if (props_OpConstantNull == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstantNull");
          props_OpConstantNull = cpb.create();
        }
        return props_OpConstantNull;
      case LanguageConceptSwitch.OpFunctionCall:
        if (props_OpFunctionCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpFunctionCall");
          props_OpFunctionCall = cpb.create();
        }
        return props_OpFunctionCall;
      case LanguageConceptSwitch.OpKill:
        if (props_OpKill == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpKill");
          props_OpKill = cpb.create();
        }
        return props_OpKill;
      case LanguageConceptSwitch.OpLabel:
        if (props_OpLabel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpLabel");
          props_OpLabel = cpb.create();
        }
        return props_OpLabel;
      case LanguageConceptSwitch.OpLoopMerge:
        if (props_OpLoopMerge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpLoopMerge");
          props_OpLoopMerge = cpb.create();
        }
        return props_OpLoopMerge;
      case LanguageConceptSwitch.OpPhi:
        if (props_OpPhi == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpPhi");
          props_OpPhi = cpb.create();
        }
        return props_OpPhi;
      case LanguageConceptSwitch.OpPtrAccessChain:
        if (props_OpPtrAccessChain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpPtrAccessChain");
          props_OpPtrAccessChain = cpb.create();
        }
        return props_OpPtrAccessChain;
      case LanguageConceptSwitch.OpReturn:
        if (props_OpReturn == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpReturn");
          props_OpReturn = cpb.create();
        }
        return props_OpReturn;
      case LanguageConceptSwitch.OpReturnValue:
        if (props_OpReturnValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpReturnValue");
          props_OpReturnValue = cpb.create();
        }
        return props_OpReturnValue;
      case LanguageConceptSwitch.OpSelecetionMerge:
        if (props_OpSelecetionMerge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSelecetionMerge");
          props_OpSelecetionMerge = cpb.create();
        }
        return props_OpSelecetionMerge;
      case LanguageConceptSwitch.OpSelect:
        if (props_OpSelect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSelect");
          props_OpSelect = cpb.create();
        }
        return props_OpSelect;
      case LanguageConceptSwitch.OpSwitch:
        if (props_OpSwitch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSwitch");
          props_OpSwitch = cpb.create();
        }
        return props_OpSwitch;
      case LanguageConceptSwitch.OpTypeBool:
        if (props_OpTypeBool == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeBool");
          props_OpTypeBool = cpb.create();
        }
        return props_OpTypeBool;
      case LanguageConceptSwitch.OpTypeDeviceEvent:
        if (props_OpTypeDeviceEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeDeviceEvent");
          props_OpTypeDeviceEvent = cpb.create();
        }
        return props_OpTypeDeviceEvent;
      case LanguageConceptSwitch.OpTypeEvent:
        if (props_OpTypeEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeEvent");
          props_OpTypeEvent = cpb.create();
        }
        return props_OpTypeEvent;
      case LanguageConceptSwitch.OpTypeForwardPointer:
        if (props_OpTypeForwardPointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeForwardPointer");
          props_OpTypeForwardPointer = cpb.create();
        }
        return props_OpTypeForwardPointer;
      case LanguageConceptSwitch.OpTypeImage:
        if (props_OpTypeImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeImage");
          props_OpTypeImage = cpb.create();
        }
        return props_OpTypeImage;
      case LanguageConceptSwitch.OpTypeNamedBarrier:
        if (props_OpTypeNamedBarrier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeNamedBarrier");
          props_OpTypeNamedBarrier = cpb.create();
        }
        return props_OpTypeNamedBarrier;
      case LanguageConceptSwitch.OpTypeOpaque:
        if (props_OpTypeOpaque == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeOpaque");
          props_OpTypeOpaque = cpb.create();
        }
        return props_OpTypeOpaque;
      case LanguageConceptSwitch.OpTypePipe:
        if (props_OpTypePipe == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypePipe");
          props_OpTypePipe = cpb.create();
        }
        return props_OpTypePipe;
      case LanguageConceptSwitch.OpTypePipeStorage:
        if (props_OpTypePipeStorage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypePipeStorage");
          props_OpTypePipeStorage = cpb.create();
        }
        return props_OpTypePipeStorage;
      case LanguageConceptSwitch.OpTypeQueue:
        if (props_OpTypeQueue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeQueue");
          props_OpTypeQueue = cpb.create();
        }
        return props_OpTypeQueue;
      case LanguageConceptSwitch.OpTypeReserveId:
        if (props_OpTypeReserveId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeReserveId");
          props_OpTypeReserveId = cpb.create();
        }
        return props_OpTypeReserveId;
      case LanguageConceptSwitch.OpTypeReverseId:
        if (props_OpTypeReverseId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeReverseId");
          props_OpTypeReverseId = cpb.create();
        }
        return props_OpTypeReverseId;
      case LanguageConceptSwitch.OpTypeSampledImage:
        if (props_OpTypeSampledImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeSampledImage");
          props_OpTypeSampledImage = cpb.create();
        }
        return props_OpTypeSampledImage;
      case LanguageConceptSwitch.OpTypeSampler:
        if (props_OpTypeSampler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeSampler");
          props_OpTypeSampler = cpb.create();
        }
        return props_OpTypeSampler;
      case LanguageConceptSwitch.OpTypeVoid:
        if (props_OpTypeVoid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeVoid");
          props_OpTypeVoid = cpb.create();
        }
        return props_OpTypeVoid;
      case LanguageConceptSwitch.Operand:
        if (props_Operand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Operand = cpb.create();
        }
        return props_Operand;
      case LanguageConceptSwitch.Result:
        if (props_Result == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Result");
          props_Result = cpb.create();
        }
        return props_Result;
      case LanguageConceptSwitch.SelectionHeader:
        if (props_SelectionHeader == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SelectionHeader");
          props_SelectionHeader = cpb.create();
        }
        return props_SelectionHeader;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.TypeAbstract:
        if (props_TypeAbstract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypeAbstract = cpb.create();
        }
        return props_TypeAbstract;
      case LanguageConceptSwitch.TypeAggregate:
        if (props_TypeAggregate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeAggregate");
          props_TypeAggregate = cpb.create();
        }
        return props_TypeAggregate;
      case LanguageConceptSwitch.TypeArray:
        if (props_TypeArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeArray");
          props_TypeArray = cpb.create();
        }
        return props_TypeArray;
      case LanguageConceptSwitch.TypeBoolean:
        if (props_TypeBoolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeBoolean");
          props_TypeBoolean = cpb.create();
        }
        return props_TypeBoolean;
      case LanguageConceptSwitch.TypeComposite:
        if (props_TypeComposite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeComposite");
          props_TypeComposite = cpb.create();
        }
        return props_TypeComposite;
      case LanguageConceptSwitch.TypeFloatingPoint:
        if (props_TypeFloatingPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeFloatingPoint");
          props_TypeFloatingPoint = cpb.create();
        }
        return props_TypeFloatingPoint;
      case LanguageConceptSwitch.TypeImage:
        if (props_TypeImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeImage");
          props_TypeImage = cpb.create();
        }
        return props_TypeImage;
      case LanguageConceptSwitch.TypeInteger:
        if (props_TypeInteger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeInteger");
          props_TypeInteger = cpb.create();
        }
        return props_TypeInteger;
      case LanguageConceptSwitch.TypeLogicalointer:
        if (props_TypeLogicalointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeLogicalointer");
          props_TypeLogicalointer = cpb.create();
        }
        return props_TypeLogicalointer;
      case LanguageConceptSwitch.TypeMatrix:
        if (props_TypeMatrix == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeMatrix");
          props_TypeMatrix = cpb.create();
        }
        return props_TypeMatrix;
      case LanguageConceptSwitch.TypeNumerical:
        if (props_TypeNumerical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeNumerical");
          props_TypeNumerical = cpb.create();
        }
        return props_TypeNumerical;
      case LanguageConceptSwitch.TypeOpaque:
        if (props_TypeOpaque == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypeOpaque = cpb.create();
        }
        return props_TypeOpaque;
      case LanguageConceptSwitch.TypePhysicalPointer:
        if (props_TypePhysicalPointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypePhysicalPointer");
          props_TypePhysicalPointer = cpb.create();
        }
        return props_TypePhysicalPointer;
      case LanguageConceptSwitch.TypeSampler:
        if (props_TypeSampler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeSampler");
          props_TypeSampler = cpb.create();
        }
        return props_TypeSampler;
      case LanguageConceptSwitch.TypeScalar:
        if (props_TypeScalar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeScalar");
          props_TypeScalar = cpb.create();
        }
        return props_TypeScalar;
      case LanguageConceptSwitch.TypeStructure:
        if (props_TypeStructure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeStructure");
          props_TypeStructure = cpb.create();
        }
        return props_TypeStructure;
      case LanguageConceptSwitch.TypeVector:
        if (props_TypeVector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeVector");
          props_TypeVector = cpb.create();
        }
        return props_TypeVector;
      case LanguageConceptSwitch.VariablePointer:
        if (props_VariablePointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariablePointer");
          props_VariablePointer = cpb.create();
        }
        return props_VariablePointer;
      case LanguageConceptSwitch.WordCount:
        if (props_WordCount == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The complete number of words taken by an instruction, including the word holding the word count and opcode, and any optional operands.");
          cpb.rawPresentation("WordCount");
          props_WordCount = cpb.create();
        }
        return props_WordCount;
    }
    return null;
  }
}
