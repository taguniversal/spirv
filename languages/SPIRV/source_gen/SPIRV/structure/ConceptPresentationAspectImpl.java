package SPIRV.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AnnotationInstruction;
  private ConceptPresentation props_BackEdge;
  private ConceptPresentation props_BackEdgeBlock;
  private ConceptPresentation props_Block;
  private ConceptPresentation props_BlockTerminationInstruction;
  private ConceptPresentation props_BranchEdge;
  private ConceptPresentation props_BranchInstruction;
  private ConceptPresentation props_Byte;
  private ConceptPresentation props_CallableDataKHR;
  private ConceptPresentation props_CallableDataNV;
  private ConceptPresentation props_ConstantInstruction;
  private ConceptPresentation props_ContinueEdge;
  private ConceptPresentation props_DebugInstruction;
  private ConceptPresentation props_Decoration;
  private ConceptPresentation props_EntryPoint;
  private ConceptPresentation props_ExecutionModeDeclaration;
  private ConceptPresentation props_FunctionTerminationInstruction;
  private ConceptPresentation props_HeaderBlock;
  private ConceptPresentation props_Id;
  private ConceptPresentation props_IncomingCallableDataKHR;
  private ConceptPresentation props_IncomingCallableDataNV;
  private ConceptPresentation props_Instruction;
  private ConceptPresentation props_Literal;
  private ConceptPresentation props_LoopHeader;
  private ConceptPresentation props_MemoryObject;
  private ConceptPresentation props_MemoryObjectDeclaration;
  private ConceptPresentation props_MergeBlock;
  private ConceptPresentation props_MergeEdge;
  private ConceptPresentation props_MergeInstruction;
  private ConceptPresentation props_Module;
  private ConceptPresentation props_NodeOutputPayloadAMDX;
  private ConceptPresentation props_NodePayloadAMDX;
  private ConceptPresentation props_NonSemanticInstruction;
  private ConceptPresentation props_NumericalName;
  private ConceptPresentation props_Object;
  private ConceptPresentation props_OpBranch;
  private ConceptPresentation props_OpBranchConditional;
  private ConceptPresentation props_OpCapability;
  private ConceptPresentation props_OpCode;
  private ConceptPresentation props_OpConstant;
  private ConceptPresentation props_OpConstantComposite;
  private ConceptPresentation props_OpConstantFalse;
  private ConceptPresentation props_OpConstantNull;
  private ConceptPresentation props_OpConstantSampler;
  private ConceptPresentation props_OpConstantTrue;
  private ConceptPresentation props_OpEntryPoint;
  private ConceptPresentation props_OpExecutionMode;
  private ConceptPresentation props_OpExecutionModeId;
  private ConceptPresentation props_OpExtInstImport;
  private ConceptPresentation props_OpExtension;
  private ConceptPresentation props_OpFunction;
  private ConceptPresentation props_OpFunctionCall;
  private ConceptPresentation props_OpFunctionEnd;
  private ConceptPresentation props_OpFunctionParameter;
  private ConceptPresentation props_OpKill;
  private ConceptPresentation props_OpLabel;
  private ConceptPresentation props_OpLoopMerge;
  private ConceptPresentation props_OpMemberName;
  private ConceptPresentation props_OpMemoryModel;
  private ConceptPresentation props_OpModuleProcessed;
  private ConceptPresentation props_OpName;
  private ConceptPresentation props_OpPhi;
  private ConceptPresentation props_OpPtrAccessChain;
  private ConceptPresentation props_OpReturn;
  private ConceptPresentation props_OpReturnValue;
  private ConceptPresentation props_OpSelecetionMerge;
  private ConceptPresentation props_OpSelect;
  private ConceptPresentation props_OpSource;
  private ConceptPresentation props_OpSourceContinued;
  private ConceptPresentation props_OpSourceExtension;
  private ConceptPresentation props_OpSpecConstant;
  private ConceptPresentation props_OpSpecConstantComposite;
  private ConceptPresentation props_OpSpecConstantOp;
  private ConceptPresentation props_OpString;
  private ConceptPresentation props_OpSwitch;
  private ConceptPresentation props_OpTerminateInvocation;
  private ConceptPresentation props_OpTypeBool;
  private ConceptPresentation props_OpTypeDeviceEvent;
  private ConceptPresentation props_OpTypeEvent;
  private ConceptPresentation props_OpTypeFloat;
  private ConceptPresentation props_OpTypeForwardPointer;
  private ConceptPresentation props_OpTypeImage;
  private ConceptPresentation props_OpTypeInt;
  private ConceptPresentation props_OpTypeMatrix;
  private ConceptPresentation props_OpTypeNamedBarrier;
  private ConceptPresentation props_OpTypeOpaque;
  private ConceptPresentation props_OpTypePipe;
  private ConceptPresentation props_OpTypePipeStorage;
  private ConceptPresentation props_OpTypePointer;
  private ConceptPresentation props_OpTypeQueue;
  private ConceptPresentation props_OpTypeReserveId;
  private ConceptPresentation props_OpTypeReverseId;
  private ConceptPresentation props_OpTypeSampledImage;
  private ConceptPresentation props_OpTypeSampler;
  private ConceptPresentation props_OpTypeVariable;
  private ConceptPresentation props_OpTypeVector;
  private ConceptPresentation props_OpTypeVoid;
  private ConceptPresentation props_OpUnreachable;
  private ConceptPresentation props_OpVariable;
  private ConceptPresentation props_Operand;
  private ConceptPresentation props_Path;
  private ConceptPresentation props_Result;
  private ConceptPresentation props_SelectionHeader;
  private ConceptPresentation props_StorageClass;
  private ConceptPresentation props_StorageClassAtomicCounter;
  private ConceptPresentation props_StorageClassBuffer;
  private ConceptPresentation props_StorageClassCrossWorkgroup;
  private ConceptPresentation props_StorageClassFunction;
  private ConceptPresentation props_StorageClassHitAttributeKHR;
  private ConceptPresentation props_StorageClassHitAttributeNV;
  private ConceptPresentation props_StorageClassImage;
  private ConceptPresentation props_StorageClassIncomingPayloadNV;
  private ConceptPresentation props_StorageClassIncomingRayPayloadKHR;
  private ConceptPresentation props_StorageClassInput;
  private ConceptPresentation props_StorageClassOutput;
  private ConceptPresentation props_StorageClassPrivate;
  private ConceptPresentation props_StorageClassPushConstant;
  private ConceptPresentation props_StorageClassRayPayloadKHR;
  private ConceptPresentation props_StorageClassRayPayloadNV;
  private ConceptPresentation props_StorageClassShaderRecordBufferKHR;
  private ConceptPresentation props_StorageClassShaderRecordBufferNV;
  private ConceptPresentation props_StorageClassTileImageEXT;
  private ConceptPresentation props_StorageClassUniform;
  private ConceptPresentation props_StorageClassUniformConstant;
  private ConceptPresentation props_StorageClassWorkgroup;
  private ConceptPresentation props_StructuredControlFlowEdge;
  private ConceptPresentation props_StructuredControlFlowPath;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_TypeAbstract;
  private ConceptPresentation props_TypeAggregate;
  private ConceptPresentation props_TypeArray;
  private ConceptPresentation props_TypeBoolean;
  private ConceptPresentation props_TypeComposite;
  private ConceptPresentation props_TypeDeclaration;
  private ConceptPresentation props_TypeFloatingPoint;
  private ConceptPresentation props_TypeImage;
  private ConceptPresentation props_TypeInteger;
  private ConceptPresentation props_TypeLogicalointer;
  private ConceptPresentation props_TypeMatrix;
  private ConceptPresentation props_TypeNumerical;
  private ConceptPresentation props_TypeOpaque;
  private ConceptPresentation props_TypePhysicalPointer;
  private ConceptPresentation props_TypeSampler;
  private ConceptPresentation props_TypeScalar;
  private ConceptPresentation props_TypeStructure;
  private ConceptPresentation props_TypeVector;
  private ConceptPresentation props_VariablePointer;
  private ConceptPresentation props_WordCount;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AnnotationInstruction:
        if (props_AnnotationInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AnnotationInstruction = cpb.create();
        }
        return props_AnnotationInstruction;
      case LanguageConceptSwitch.BackEdge:
        if (props_BackEdge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BackEdge");
          props_BackEdge = cpb.create();
        }
        return props_BackEdge;
      case LanguageConceptSwitch.BackEdgeBlock:
        if (props_BackEdgeBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BackEdgeBlock");
          props_BackEdgeBlock = cpb.create();
        }
        return props_BackEdgeBlock;
      case LanguageConceptSwitch.Block:
        if (props_Block == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Block");
          props_Block = cpb.create();
        }
        return props_Block;
      case LanguageConceptSwitch.BlockTerminationInstruction:
        if (props_BlockTerminationInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BlockTerminationInstruction");
          props_BlockTerminationInstruction = cpb.create();
        }
        return props_BlockTerminationInstruction;
      case LanguageConceptSwitch.BranchEdge:
        if (props_BranchEdge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BranchEdge");
          props_BranchEdge = cpb.create();
        }
        return props_BranchEdge;
      case LanguageConceptSwitch.BranchInstruction:
        if (props_BranchInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BranchInstruction = cpb.create();
        }
        return props_BranchInstruction;
      case LanguageConceptSwitch.Byte:
        if (props_Byte == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Byte");
          props_Byte = cpb.create();
        }
        return props_Byte;
      case LanguageConceptSwitch.CallableDataKHR:
        if (props_CallableDataKHR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CallableDataKHR");
          props_CallableDataKHR = cpb.create();
        }
        return props_CallableDataKHR;
      case LanguageConceptSwitch.CallableDataNV:
        if (props_CallableDataNV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CallableDataNV");
          props_CallableDataNV = cpb.create();
        }
        return props_CallableDataNV;
      case LanguageConceptSwitch.ConstantInstruction:
        if (props_ConstantInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConstantInstruction");
          props_ConstantInstruction = cpb.create();
        }
        return props_ConstantInstruction;
      case LanguageConceptSwitch.ContinueEdge:
        if (props_ContinueEdge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ContinueEdge");
          props_ContinueEdge = cpb.create();
        }
        return props_ContinueEdge;
      case LanguageConceptSwitch.DebugInstruction:
        if (props_DebugInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DebugInstruction = cpb.create();
        }
        return props_DebugInstruction;
      case LanguageConceptSwitch.Decoration:
        if (props_Decoration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Decoration");
          props_Decoration = cpb.create();
        }
        return props_Decoration;
      case LanguageConceptSwitch.EntryPoint:
        if (props_EntryPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EntryPoint");
          props_EntryPoint = cpb.create();
        }
        return props_EntryPoint;
      case LanguageConceptSwitch.ExecutionModeDeclaration:
        if (props_ExecutionModeDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ExecutionModeDeclaration = cpb.create();
        }
        return props_ExecutionModeDeclaration;
      case LanguageConceptSwitch.FunctionTerminationInstruction:
        if (props_FunctionTerminationInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FunctionTerminationInstruction = cpb.create();
        }
        return props_FunctionTerminationInstruction;
      case LanguageConceptSwitch.HeaderBlock:
        if (props_HeaderBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HeaderBlock");
          props_HeaderBlock = cpb.create();
        }
        return props_HeaderBlock;
      case LanguageConceptSwitch.Id:
        if (props_Id == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Id");
          props_Id = cpb.create();
        }
        return props_Id;
      case LanguageConceptSwitch.IncomingCallableDataKHR:
        if (props_IncomingCallableDataKHR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IncomingCallableDataKHR");
          props_IncomingCallableDataKHR = cpb.create();
        }
        return props_IncomingCallableDataKHR;
      case LanguageConceptSwitch.IncomingCallableDataNV:
        if (props_IncomingCallableDataNV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IncomingCallableDataNV");
          props_IncomingCallableDataNV = cpb.create();
        }
        return props_IncomingCallableDataNV;
      case LanguageConceptSwitch.Instruction:
        if (props_Instruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Instruction");
          props_Instruction = cpb.create();
        }
        return props_Instruction;
      case LanguageConceptSwitch.Literal:
        if (props_Literal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Literal");
          props_Literal = cpb.create();
        }
        return props_Literal;
      case LanguageConceptSwitch.LoopHeader:
        if (props_LoopHeader == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LoopHeader");
          props_LoopHeader = cpb.create();
        }
        return props_LoopHeader;
      case LanguageConceptSwitch.MemoryObject:
        if (props_MemoryObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemoryObject");
          props_MemoryObject = cpb.create();
        }
        return props_MemoryObject;
      case LanguageConceptSwitch.MemoryObjectDeclaration:
        if (props_MemoryObjectDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MemoryObjectDeclaration");
          props_MemoryObjectDeclaration = cpb.create();
        }
        return props_MemoryObjectDeclaration;
      case LanguageConceptSwitch.MergeBlock:
        if (props_MergeBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeBlock");
          props_MergeBlock = cpb.create();
        }
        return props_MergeBlock;
      case LanguageConceptSwitch.MergeEdge:
        if (props_MergeEdge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeEdge");
          props_MergeEdge = cpb.create();
        }
        return props_MergeEdge;
      case LanguageConceptSwitch.MergeInstruction:
        if (props_MergeInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MergeInstruction");
          props_MergeInstruction = cpb.create();
        }
        return props_MergeInstruction;
      case LanguageConceptSwitch.Module:
        if (props_Module == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A single unit of SPIR-V");
          cpb.rawPresentation("Module");
          props_Module = cpb.create();
        }
        return props_Module;
      case LanguageConceptSwitch.NodeOutputPayloadAMDX:
        if (props_NodeOutputPayloadAMDX == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NodeOutputPayloadAMDX");
          props_NodeOutputPayloadAMDX = cpb.create();
        }
        return props_NodeOutputPayloadAMDX;
      case LanguageConceptSwitch.NodePayloadAMDX:
        if (props_NodePayloadAMDX == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NodePayloadAMDX");
          props_NodePayloadAMDX = cpb.create();
        }
        return props_NodePayloadAMDX;
      case LanguageConceptSwitch.NonSemanticInstruction:
        if (props_NonSemanticInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NonSemanticInstruction");
          props_NonSemanticInstruction = cpb.create();
        }
        return props_NonSemanticInstruction;
      case LanguageConceptSwitch.NumericalName:
        if (props_NumericalName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NumericalName");
          props_NumericalName = cpb.create();
        }
        return props_NumericalName;
      case LanguageConceptSwitch.Object:
        if (props_Object == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Object");
          props_Object = cpb.create();
        }
        return props_Object;
      case LanguageConceptSwitch.OpBranch:
        if (props_OpBranch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpBranch");
          props_OpBranch = cpb.create();
        }
        return props_OpBranch;
      case LanguageConceptSwitch.OpBranchConditional:
        if (props_OpBranchConditional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpBranchConditional");
          props_OpBranchConditional = cpb.create();
        }
        return props_OpBranchConditional;
      case LanguageConceptSwitch.OpCapability:
        if (props_OpCapability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpCapability");
          props_OpCapability = cpb.create();
        }
        return props_OpCapability;
      case LanguageConceptSwitch.OpCode:
        if (props_OpCode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpCode");
          props_OpCode = cpb.create();
        }
        return props_OpCode;
      case LanguageConceptSwitch.OpConstant:
        if (props_OpConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstant");
          props_OpConstant = cpb.create();
        }
        return props_OpConstant;
      case LanguageConceptSwitch.OpConstantComposite:
        if (props_OpConstantComposite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstantComposite");
          props_OpConstantComposite = cpb.create();
        }
        return props_OpConstantComposite;
      case LanguageConceptSwitch.OpConstantFalse:
        if (props_OpConstantFalse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstantFalse");
          props_OpConstantFalse = cpb.create();
        }
        return props_OpConstantFalse;
      case LanguageConceptSwitch.OpConstantNull:
        if (props_OpConstantNull == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstantNull");
          props_OpConstantNull = cpb.create();
        }
        return props_OpConstantNull;
      case LanguageConceptSwitch.OpConstantSampler:
        if (props_OpConstantSampler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstantSampler");
          props_OpConstantSampler = cpb.create();
        }
        return props_OpConstantSampler;
      case LanguageConceptSwitch.OpConstantTrue:
        if (props_OpConstantTrue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpConstantTrue");
          props_OpConstantTrue = cpb.create();
        }
        return props_OpConstantTrue;
      case LanguageConceptSwitch.OpEntryPoint:
        if (props_OpEntryPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpEntryPoint");
          props_OpEntryPoint = cpb.create();
        }
        return props_OpEntryPoint;
      case LanguageConceptSwitch.OpExecutionMode:
        if (props_OpExecutionMode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpExecutionMode");
          props_OpExecutionMode = cpb.create();
        }
        return props_OpExecutionMode;
      case LanguageConceptSwitch.OpExecutionModeId:
        if (props_OpExecutionModeId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpExecutionModeId");
          props_OpExecutionModeId = cpb.create();
        }
        return props_OpExecutionModeId;
      case LanguageConceptSwitch.OpExtInstImport:
        if (props_OpExtInstImport == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpExtInstImport");
          props_OpExtInstImport = cpb.create();
        }
        return props_OpExtInstImport;
      case LanguageConceptSwitch.OpExtension:
        if (props_OpExtension == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpExtension");
          props_OpExtension = cpb.create();
        }
        return props_OpExtension;
      case LanguageConceptSwitch.OpFunction:
        if (props_OpFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpFunction");
          props_OpFunction = cpb.create();
        }
        return props_OpFunction;
      case LanguageConceptSwitch.OpFunctionCall:
        if (props_OpFunctionCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpFunctionCall");
          props_OpFunctionCall = cpb.create();
        }
        return props_OpFunctionCall;
      case LanguageConceptSwitch.OpFunctionEnd:
        if (props_OpFunctionEnd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpFunctionEnd");
          props_OpFunctionEnd = cpb.create();
        }
        return props_OpFunctionEnd;
      case LanguageConceptSwitch.OpFunctionParameter:
        if (props_OpFunctionParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpFunctionParameter");
          props_OpFunctionParameter = cpb.create();
        }
        return props_OpFunctionParameter;
      case LanguageConceptSwitch.OpKill:
        if (props_OpKill == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpKill");
          props_OpKill = cpb.create();
        }
        return props_OpKill;
      case LanguageConceptSwitch.OpLabel:
        if (props_OpLabel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpLabel");
          props_OpLabel = cpb.create();
        }
        return props_OpLabel;
      case LanguageConceptSwitch.OpLoopMerge:
        if (props_OpLoopMerge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpLoopMerge");
          props_OpLoopMerge = cpb.create();
        }
        return props_OpLoopMerge;
      case LanguageConceptSwitch.OpMemberName:
        if (props_OpMemberName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpMemberName");
          props_OpMemberName = cpb.create();
        }
        return props_OpMemberName;
      case LanguageConceptSwitch.OpMemoryModel:
        if (props_OpMemoryModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpMemoryModel");
          props_OpMemoryModel = cpb.create();
        }
        return props_OpMemoryModel;
      case LanguageConceptSwitch.OpModuleProcessed:
        if (props_OpModuleProcessed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpModuleProcessed");
          props_OpModuleProcessed = cpb.create();
        }
        return props_OpModuleProcessed;
      case LanguageConceptSwitch.OpName:
        if (props_OpName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpName");
          props_OpName = cpb.create();
        }
        return props_OpName;
      case LanguageConceptSwitch.OpPhi:
        if (props_OpPhi == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpPhi");
          props_OpPhi = cpb.create();
        }
        return props_OpPhi;
      case LanguageConceptSwitch.OpPtrAccessChain:
        if (props_OpPtrAccessChain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpPtrAccessChain");
          props_OpPtrAccessChain = cpb.create();
        }
        return props_OpPtrAccessChain;
      case LanguageConceptSwitch.OpReturn:
        if (props_OpReturn == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpReturn");
          props_OpReturn = cpb.create();
        }
        return props_OpReturn;
      case LanguageConceptSwitch.OpReturnValue:
        if (props_OpReturnValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpReturnValue");
          props_OpReturnValue = cpb.create();
        }
        return props_OpReturnValue;
      case LanguageConceptSwitch.OpSelecetionMerge:
        if (props_OpSelecetionMerge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSelecetionMerge");
          props_OpSelecetionMerge = cpb.create();
        }
        return props_OpSelecetionMerge;
      case LanguageConceptSwitch.OpSelect:
        if (props_OpSelect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSelect");
          props_OpSelect = cpb.create();
        }
        return props_OpSelect;
      case LanguageConceptSwitch.OpSource:
        if (props_OpSource == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSource");
          props_OpSource = cpb.create();
        }
        return props_OpSource;
      case LanguageConceptSwitch.OpSourceContinued:
        if (props_OpSourceContinued == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSourceContinued");
          props_OpSourceContinued = cpb.create();
        }
        return props_OpSourceContinued;
      case LanguageConceptSwitch.OpSourceExtension:
        if (props_OpSourceExtension == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSourceExtension");
          props_OpSourceExtension = cpb.create();
        }
        return props_OpSourceExtension;
      case LanguageConceptSwitch.OpSpecConstant:
        if (props_OpSpecConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSpecConstant");
          props_OpSpecConstant = cpb.create();
        }
        return props_OpSpecConstant;
      case LanguageConceptSwitch.OpSpecConstantComposite:
        if (props_OpSpecConstantComposite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSpecConstantComposite");
          props_OpSpecConstantComposite = cpb.create();
        }
        return props_OpSpecConstantComposite;
      case LanguageConceptSwitch.OpSpecConstantOp:
        if (props_OpSpecConstantOp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSpecConstantOp");
          props_OpSpecConstantOp = cpb.create();
        }
        return props_OpSpecConstantOp;
      case LanguageConceptSwitch.OpString:
        if (props_OpString == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpString");
          props_OpString = cpb.create();
        }
        return props_OpString;
      case LanguageConceptSwitch.OpSwitch:
        if (props_OpSwitch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpSwitch");
          props_OpSwitch = cpb.create();
        }
        return props_OpSwitch;
      case LanguageConceptSwitch.OpTerminateInvocation:
        if (props_OpTerminateInvocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTerminateInvocation");
          props_OpTerminateInvocation = cpb.create();
        }
        return props_OpTerminateInvocation;
      case LanguageConceptSwitch.OpTypeBool:
        if (props_OpTypeBool == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeBool");
          props_OpTypeBool = cpb.create();
        }
        return props_OpTypeBool;
      case LanguageConceptSwitch.OpTypeDeviceEvent:
        if (props_OpTypeDeviceEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeDeviceEvent");
          props_OpTypeDeviceEvent = cpb.create();
        }
        return props_OpTypeDeviceEvent;
      case LanguageConceptSwitch.OpTypeEvent:
        if (props_OpTypeEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeEvent");
          props_OpTypeEvent = cpb.create();
        }
        return props_OpTypeEvent;
      case LanguageConceptSwitch.OpTypeFloat:
        if (props_OpTypeFloat == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeFloat");
          props_OpTypeFloat = cpb.create();
        }
        return props_OpTypeFloat;
      case LanguageConceptSwitch.OpTypeForwardPointer:
        if (props_OpTypeForwardPointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeForwardPointer");
          props_OpTypeForwardPointer = cpb.create();
        }
        return props_OpTypeForwardPointer;
      case LanguageConceptSwitch.OpTypeImage:
        if (props_OpTypeImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeImage");
          props_OpTypeImage = cpb.create();
        }
        return props_OpTypeImage;
      case LanguageConceptSwitch.OpTypeInt:
        if (props_OpTypeInt == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeInt");
          props_OpTypeInt = cpb.create();
        }
        return props_OpTypeInt;
      case LanguageConceptSwitch.OpTypeMatrix:
        if (props_OpTypeMatrix == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeMatrix");
          props_OpTypeMatrix = cpb.create();
        }
        return props_OpTypeMatrix;
      case LanguageConceptSwitch.OpTypeNamedBarrier:
        if (props_OpTypeNamedBarrier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeNamedBarrier");
          props_OpTypeNamedBarrier = cpb.create();
        }
        return props_OpTypeNamedBarrier;
      case LanguageConceptSwitch.OpTypeOpaque:
        if (props_OpTypeOpaque == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeOpaque");
          props_OpTypeOpaque = cpb.create();
        }
        return props_OpTypeOpaque;
      case LanguageConceptSwitch.OpTypePipe:
        if (props_OpTypePipe == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypePipe");
          props_OpTypePipe = cpb.create();
        }
        return props_OpTypePipe;
      case LanguageConceptSwitch.OpTypePipeStorage:
        if (props_OpTypePipeStorage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypePipeStorage");
          props_OpTypePipeStorage = cpb.create();
        }
        return props_OpTypePipeStorage;
      case LanguageConceptSwitch.OpTypePointer:
        if (props_OpTypePointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypePointer");
          props_OpTypePointer = cpb.create();
        }
        return props_OpTypePointer;
      case LanguageConceptSwitch.OpTypeQueue:
        if (props_OpTypeQueue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeQueue");
          props_OpTypeQueue = cpb.create();
        }
        return props_OpTypeQueue;
      case LanguageConceptSwitch.OpTypeReserveId:
        if (props_OpTypeReserveId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeReserveId");
          props_OpTypeReserveId = cpb.create();
        }
        return props_OpTypeReserveId;
      case LanguageConceptSwitch.OpTypeReverseId:
        if (props_OpTypeReverseId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeReverseId");
          props_OpTypeReverseId = cpb.create();
        }
        return props_OpTypeReverseId;
      case LanguageConceptSwitch.OpTypeSampledImage:
        if (props_OpTypeSampledImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeSampledImage");
          props_OpTypeSampledImage = cpb.create();
        }
        return props_OpTypeSampledImage;
      case LanguageConceptSwitch.OpTypeSampler:
        if (props_OpTypeSampler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeSampler");
          props_OpTypeSampler = cpb.create();
        }
        return props_OpTypeSampler;
      case LanguageConceptSwitch.OpTypeVariable:
        if (props_OpTypeVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeVariable");
          props_OpTypeVariable = cpb.create();
        }
        return props_OpTypeVariable;
      case LanguageConceptSwitch.OpTypeVector:
        if (props_OpTypeVector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeVector");
          props_OpTypeVector = cpb.create();
        }
        return props_OpTypeVector;
      case LanguageConceptSwitch.OpTypeVoid:
        if (props_OpTypeVoid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpTypeVoid");
          props_OpTypeVoid = cpb.create();
        }
        return props_OpTypeVoid;
      case LanguageConceptSwitch.OpUnreachable:
        if (props_OpUnreachable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpUnreachable");
          props_OpUnreachable = cpb.create();
        }
        return props_OpUnreachable;
      case LanguageConceptSwitch.OpVariable:
        if (props_OpVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpVariable");
          props_OpVariable = cpb.create();
        }
        return props_OpVariable;
      case LanguageConceptSwitch.Operand:
        if (props_Operand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Operand = cpb.create();
        }
        return props_Operand;
      case LanguageConceptSwitch.Path:
        if (props_Path == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Path");
          props_Path = cpb.create();
        }
        return props_Path;
      case LanguageConceptSwitch.Result:
        if (props_Result == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Result");
          props_Result = cpb.create();
        }
        return props_Result;
      case LanguageConceptSwitch.SelectionHeader:
        if (props_SelectionHeader == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SelectionHeader");
          props_SelectionHeader = cpb.create();
        }
        return props_SelectionHeader;
      case LanguageConceptSwitch.StorageClass:
        if (props_StorageClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StorageClass = cpb.create();
        }
        return props_StorageClass;
      case LanguageConceptSwitch.StorageClassAtomicCounter:
        if (props_StorageClassAtomicCounter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassAtomicCounter");
          props_StorageClassAtomicCounter = cpb.create();
        }
        return props_StorageClassAtomicCounter;
      case LanguageConceptSwitch.StorageClassBuffer:
        if (props_StorageClassBuffer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassBuffer");
          props_StorageClassBuffer = cpb.create();
        }
        return props_StorageClassBuffer;
      case LanguageConceptSwitch.StorageClassCrossWorkgroup:
        if (props_StorageClassCrossWorkgroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassCrossWorkgroup");
          props_StorageClassCrossWorkgroup = cpb.create();
        }
        return props_StorageClassCrossWorkgroup;
      case LanguageConceptSwitch.StorageClassFunction:
        if (props_StorageClassFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassFunction");
          props_StorageClassFunction = cpb.create();
        }
        return props_StorageClassFunction;
      case LanguageConceptSwitch.StorageClassHitAttributeKHR:
        if (props_StorageClassHitAttributeKHR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassHitAttributeKHR");
          props_StorageClassHitAttributeKHR = cpb.create();
        }
        return props_StorageClassHitAttributeKHR;
      case LanguageConceptSwitch.StorageClassHitAttributeNV:
        if (props_StorageClassHitAttributeNV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassHitAttributeNV");
          props_StorageClassHitAttributeNV = cpb.create();
        }
        return props_StorageClassHitAttributeNV;
      case LanguageConceptSwitch.StorageClassImage:
        if (props_StorageClassImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassImage");
          props_StorageClassImage = cpb.create();
        }
        return props_StorageClassImage;
      case LanguageConceptSwitch.StorageClassIncomingPayloadNV:
        if (props_StorageClassIncomingPayloadNV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassIncomingPayloadNV");
          props_StorageClassIncomingPayloadNV = cpb.create();
        }
        return props_StorageClassIncomingPayloadNV;
      case LanguageConceptSwitch.StorageClassIncomingRayPayloadKHR:
        if (props_StorageClassIncomingRayPayloadKHR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassIncomingRayPayloadKHR");
          props_StorageClassIncomingRayPayloadKHR = cpb.create();
        }
        return props_StorageClassIncomingRayPayloadKHR;
      case LanguageConceptSwitch.StorageClassInput:
        if (props_StorageClassInput == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassInput");
          props_StorageClassInput = cpb.create();
        }
        return props_StorageClassInput;
      case LanguageConceptSwitch.StorageClassOutput:
        if (props_StorageClassOutput == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassOutput");
          props_StorageClassOutput = cpb.create();
        }
        return props_StorageClassOutput;
      case LanguageConceptSwitch.StorageClassPrivate:
        if (props_StorageClassPrivate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassPrivate");
          props_StorageClassPrivate = cpb.create();
        }
        return props_StorageClassPrivate;
      case LanguageConceptSwitch.StorageClassPushConstant:
        if (props_StorageClassPushConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassPushConstant");
          props_StorageClassPushConstant = cpb.create();
        }
        return props_StorageClassPushConstant;
      case LanguageConceptSwitch.StorageClassRayPayloadKHR:
        if (props_StorageClassRayPayloadKHR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassRayPayloadKHR");
          props_StorageClassRayPayloadKHR = cpb.create();
        }
        return props_StorageClassRayPayloadKHR;
      case LanguageConceptSwitch.StorageClassRayPayloadNV:
        if (props_StorageClassRayPayloadNV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassRayPayloadNV");
          props_StorageClassRayPayloadNV = cpb.create();
        }
        return props_StorageClassRayPayloadNV;
      case LanguageConceptSwitch.StorageClassShaderRecordBufferKHR:
        if (props_StorageClassShaderRecordBufferKHR == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassShaderRecordBufferKHR");
          props_StorageClassShaderRecordBufferKHR = cpb.create();
        }
        return props_StorageClassShaderRecordBufferKHR;
      case LanguageConceptSwitch.StorageClassShaderRecordBufferNV:
        if (props_StorageClassShaderRecordBufferNV == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassShaderRecordBufferNV");
          props_StorageClassShaderRecordBufferNV = cpb.create();
        }
        return props_StorageClassShaderRecordBufferNV;
      case LanguageConceptSwitch.StorageClassTileImageEXT:
        if (props_StorageClassTileImageEXT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassTileImageEXT");
          props_StorageClassTileImageEXT = cpb.create();
        }
        return props_StorageClassTileImageEXT;
      case LanguageConceptSwitch.StorageClassUniform:
        if (props_StorageClassUniform == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassUniform");
          props_StorageClassUniform = cpb.create();
        }
        return props_StorageClassUniform;
      case LanguageConceptSwitch.StorageClassUniformConstant:
        if (props_StorageClassUniformConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassUniformConstant");
          props_StorageClassUniformConstant = cpb.create();
        }
        return props_StorageClassUniformConstant;
      case LanguageConceptSwitch.StorageClassWorkgroup:
        if (props_StorageClassWorkgroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageClassWorkgroup");
          props_StorageClassWorkgroup = cpb.create();
        }
        return props_StorageClassWorkgroup;
      case LanguageConceptSwitch.StructuredControlFlowEdge:
        if (props_StructuredControlFlowEdge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StructuredControlFlowEdge");
          props_StructuredControlFlowEdge = cpb.create();
        }
        return props_StructuredControlFlowEdge;
      case LanguageConceptSwitch.StructuredControlFlowPath:
        if (props_StructuredControlFlowPath == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StructuredControlFlowPath");
          props_StructuredControlFlowPath = cpb.create();
        }
        return props_StructuredControlFlowPath;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.TypeAbstract:
        if (props_TypeAbstract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypeAbstract = cpb.create();
        }
        return props_TypeAbstract;
      case LanguageConceptSwitch.TypeAggregate:
        if (props_TypeAggregate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeAggregate");
          props_TypeAggregate = cpb.create();
        }
        return props_TypeAggregate;
      case LanguageConceptSwitch.TypeArray:
        if (props_TypeArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeArray");
          props_TypeArray = cpb.create();
        }
        return props_TypeArray;
      case LanguageConceptSwitch.TypeBoolean:
        if (props_TypeBoolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeBoolean");
          props_TypeBoolean = cpb.create();
        }
        return props_TypeBoolean;
      case LanguageConceptSwitch.TypeComposite:
        if (props_TypeComposite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeComposite");
          props_TypeComposite = cpb.create();
        }
        return props_TypeComposite;
      case LanguageConceptSwitch.TypeDeclaration:
        if (props_TypeDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeDeclaration");
          props_TypeDeclaration = cpb.create();
        }
        return props_TypeDeclaration;
      case LanguageConceptSwitch.TypeFloatingPoint:
        if (props_TypeFloatingPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeFloatingPoint");
          props_TypeFloatingPoint = cpb.create();
        }
        return props_TypeFloatingPoint;
      case LanguageConceptSwitch.TypeImage:
        if (props_TypeImage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeImage");
          props_TypeImage = cpb.create();
        }
        return props_TypeImage;
      case LanguageConceptSwitch.TypeInteger:
        if (props_TypeInteger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeInteger");
          props_TypeInteger = cpb.create();
        }
        return props_TypeInteger;
      case LanguageConceptSwitch.TypeLogicalointer:
        if (props_TypeLogicalointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeLogicalointer");
          props_TypeLogicalointer = cpb.create();
        }
        return props_TypeLogicalointer;
      case LanguageConceptSwitch.TypeMatrix:
        if (props_TypeMatrix == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeMatrix");
          props_TypeMatrix = cpb.create();
        }
        return props_TypeMatrix;
      case LanguageConceptSwitch.TypeNumerical:
        if (props_TypeNumerical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeNumerical");
          props_TypeNumerical = cpb.create();
        }
        return props_TypeNumerical;
      case LanguageConceptSwitch.TypeOpaque:
        if (props_TypeOpaque == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypeOpaque = cpb.create();
        }
        return props_TypeOpaque;
      case LanguageConceptSwitch.TypePhysicalPointer:
        if (props_TypePhysicalPointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypePhysicalPointer");
          props_TypePhysicalPointer = cpb.create();
        }
        return props_TypePhysicalPointer;
      case LanguageConceptSwitch.TypeSampler:
        if (props_TypeSampler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeSampler");
          props_TypeSampler = cpb.create();
        }
        return props_TypeSampler;
      case LanguageConceptSwitch.TypeScalar:
        if (props_TypeScalar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeScalar");
          props_TypeScalar = cpb.create();
        }
        return props_TypeScalar;
      case LanguageConceptSwitch.TypeStructure:
        if (props_TypeStructure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeStructure");
          props_TypeStructure = cpb.create();
        }
        return props_TypeStructure;
      case LanguageConceptSwitch.TypeVector:
        if (props_TypeVector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypeVector");
          props_TypeVector = cpb.create();
        }
        return props_TypeVector;
      case LanguageConceptSwitch.VariablePointer:
        if (props_VariablePointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariablePointer");
          props_VariablePointer = cpb.create();
        }
        return props_VariablePointer;
      case LanguageConceptSwitch.WordCount:
        if (props_WordCount == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The complete number of words taken by an instruction, including the word holding the word count and opcode, and any optional operands.");
          cpb.rawPresentation("WordCount");
          props_WordCount = cpb.create();
        }
        return props_WordCount;
    }
    return null;
  }
}
