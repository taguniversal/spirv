package SPIRV.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Block = 0;
  public static final int BlockTerminationInstruction = 1;
  public static final int Byte = 2;
  public static final int ConstantInstruction = 3;
  public static final int Decoration = 4;
  public static final int EntryPoint = 5;
  public static final int FunctionTerminationInstruction = 6;
  public static final int HeaderBlock = 7;
  public static final int Id = 8;
  public static final int Instruction = 9;
  public static final int Literal = 10;
  public static final int LoopHeader = 11;
  public static final int MemoryObject = 12;
  public static final int MemoryObjectDeclaration = 13;
  public static final int MergeBlock = 14;
  public static final int MergeInstruction = 15;
  public static final int Module = 16;
  public static final int NonSemanticInstruction = 17;
  public static final int NumericalName = 18;
  public static final int Object = 19;
  public static final int OpBranch = 20;
  public static final int OpBranchConditional = 21;
  public static final int OpCapability = 22;
  public static final int OpCode = 23;
  public static final int OpConstantNull = 24;
  public static final int OpFunctionCall = 25;
  public static final int OpKill = 26;
  public static final int OpLabel = 27;
  public static final int OpLoopMerge = 28;
  public static final int OpPhi = 29;
  public static final int OpPtrAccessChain = 30;
  public static final int OpReturn = 31;
  public static final int OpReturnValue = 32;
  public static final int OpSelecetionMerge = 33;
  public static final int OpSelect = 34;
  public static final int OpSwitch = 35;
  public static final int OpTypeBool = 36;
  public static final int OpTypeDeviceEvent = 37;
  public static final int OpTypeEvent = 38;
  public static final int OpTypeForwardPointer = 39;
  public static final int OpTypeImage = 40;
  public static final int OpTypeNamedBarrier = 41;
  public static final int OpTypeOpaque = 42;
  public static final int OpTypePipe = 43;
  public static final int OpTypePipeStorage = 44;
  public static final int OpTypeQueue = 45;
  public static final int OpTypeReserveId = 46;
  public static final int OpTypeReverseId = 47;
  public static final int OpTypeSampledImage = 48;
  public static final int OpTypeSampler = 49;
  public static final int OpTypeVoid = 50;
  public static final int Operand = 51;
  public static final int Result = 52;
  public static final int SelectionHeader = 53;
  public static final int Type = 54;
  public static final int TypeAbstract = 55;
  public static final int TypeAggregate = 56;
  public static final int TypeArray = 57;
  public static final int TypeBoolean = 58;
  public static final int TypeComposite = 59;
  public static final int TypeFloatingPoint = 60;
  public static final int TypeImage = 61;
  public static final int TypeInteger = 62;
  public static final int TypeLogicalointer = 63;
  public static final int TypeMatrix = 64;
  public static final int TypeNumerical = 65;
  public static final int TypeOpaque = 66;
  public static final int TypePhysicalPointer = 67;
  public static final int TypeSampler = 68;
  public static final int TypeScalar = 69;
  public static final int TypeStructure = 70;
  public static final int TypeVector = 71;
  public static final int VariablePointer = 72;
  public static final int WordCount = 73;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x4d403df5e7f84d28L, 0x822bebededfb9fefL);
    builder.put(0x1f77f80cb3b6af5aL, Block);
    builder.put(0x1f77f80cb3b6af67L, BlockTerminationInstruction);
    builder.put(0x1f77f80cb3b6afbeL, Byte);
    builder.put(0x1f77f80cb3b6b000L, ConstantInstruction);
    builder.put(0x1f77f80cb3b6aff8L, Decoration);
    builder.put(0x1f77f80cb3b6af58L, EntryPoint);
    builder.put(0x1f77f80cb3b6af5fL, FunctionTerminationInstruction);
    builder.put(0x1f77f80cb3b6af77L, HeaderBlock);
    builder.put(0x1f77f80cb3b6af96L, Id);
    builder.put(0x1f77f80cb3b6af5cL, Instruction);
    builder.put(0x1f77f80cb3b6afbcL, Literal);
    builder.put(0x1f77f80cb3b6af7bL, LoopHeader);
    builder.put(0x1f77f80cb3b6affcL, MemoryObject);
    builder.put(0x1f77f80cb3b6affeL, MemoryObjectDeclaration);
    builder.put(0x1f77f80cb3b6af83L, MergeBlock);
    builder.put(0x1f77f80cb3b6af71L, MergeInstruction);
    builder.put(0x1f77f80cb3b65a3fL, Module);
    builder.put(0x1f77f80cb3b6b002L, NonSemanticInstruction);
    builder.put(0x1f77f80cb3b6afadL, NumericalName);
    builder.put(0x1f77f80cb3b6affaL, Object);
    builder.put(0x1f77f80cb3b6af69L, OpBranch);
    builder.put(0x1f77f80cb3b6af6dL, OpBranchConditional);
    builder.put(0x1f77f80cb3b6af90L, OpCapability);
    builder.put(0x1f77f80cb3b6afe2L, OpCode);
    builder.put(0x1f77f80cb3b6b053L, OpConstantNull);
    builder.put(0x1f77f80cb3b6b04cL, OpFunctionCall);
    builder.put(0x1f77f80cb3b6af65L, OpKill);
    builder.put(0x1f77f80cb3b6af5dL, OpLabel);
    builder.put(0x1f77f80cb3b6af75L, OpLoopMerge);
    builder.put(0x1f77f80cb3b6b04aL, OpPhi);
    builder.put(0x1f77f80cb3b6b04fL, OpPtrAccessChain);
    builder.put(0x1f77f80cb3b6b058L, OpReturn);
    builder.put(0x1f77f80cb3b6af63L, OpReturnValue);
    builder.put(0x1f77f80cb3b6af73L, OpSelecetionMerge);
    builder.put(0x1f77f80cb3b6b048L, OpSelect);
    builder.put(0x1f77f80cb3b6af6fL, OpSwitch);
    builder.put(0x1f77f80cb3b6b021L, OpTypeBool);
    builder.put(0x1f77f80cb3b6b034L, OpTypeDeviceEvent);
    builder.put(0x1f77f80cb3b6b030L, OpTypeEvent);
    builder.put(0x1f77f80cb3b6b041L, OpTypeForwardPointer);
    builder.put(0x1f77f80cb3b6b028L, OpTypeImage);
    builder.put(0x1f77f80cb3b6b046L, OpTypeNamedBarrier);
    builder.put(0x1f77f80cb3b6b02eL, OpTypeOpaque);
    builder.put(0x1f77f80cb3b6b03fL, OpTypePipe);
    builder.put(0x1f77f80cb3b6b043L, OpTypePipeStorage);
    builder.put(0x1f77f80cb3b6b03cL, OpTypeQueue);
    builder.put(0x1f77f80cb3b6b03aL, OpTypeReserveId);
    builder.put(0x1f77f80cb3b6b036L, OpTypeReverseId);
    builder.put(0x1f77f80cb3b6b02cL, OpTypeSampledImage);
    builder.put(0x1f77f80cb3b6b02aL, OpTypeSampler);
    builder.put(0x1f77f80cb3b6b020L, OpTypeVoid);
    builder.put(0x1f77f80cb3b6afc2L, Operand);
    builder.put(0x1f77f80cb3b6afb7L, Result);
    builder.put(0x1f77f80cb3b6af80L, SelectionHeader);
    builder.put(0x1f77f80cb3b6b005L, Type);
    builder.put(0x1f77f80cb3b6b01eL, TypeAbstract);
    builder.put(0x1f77f80cb3b6b016L, TypeAggregate);
    builder.put(0x1f77f80cb3b6b013L, TypeArray);
    builder.put(0x1f77f80cb3b6b004L, TypeBoolean);
    builder.put(0x1f77f80cb3b6b018L, TypeComposite);
    builder.put(0x1f77f80cb3b6b009L, TypeFloatingPoint);
    builder.put(0x1f77f80cb3b6b01aL, TypeImage);
    builder.put(0x1f77f80cb3b6b007L, TypeInteger);
    builder.put(0x1f77f80cb3b6b023L, TypeLogicalointer);
    builder.put(0x1f77f80cb3b6b011L, TypeMatrix);
    builder.put(0x1f77f80cb3b6b00bL, TypeNumerical);
    builder.put(0x1f77f80cb3b6b026L, TypeOpaque);
    builder.put(0x1f77f80cb3b6b024L, TypePhysicalPointer);
    builder.put(0x1f77f80cb3b6b01cL, TypeSampler);
    builder.put(0x1f77f80cb3b6b00dL, TypeScalar);
    builder.put(0x1f77f80cb3b6b015L, TypeStructure);
    builder.put(0x1f77f80cb3b6b00fL, TypeVector);
    builder.put(0x1f77f80cb3b6b051L, VariablePointer);
    builder.put(0x1f77f80cb3b6afcaL, WordCount);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
