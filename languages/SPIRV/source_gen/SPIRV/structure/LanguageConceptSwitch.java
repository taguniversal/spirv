package SPIRV.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AnnotationInstruction = 0;
  public static final int BackEdge = 1;
  public static final int BackEdgeBlock = 2;
  public static final int Block = 3;
  public static final int BlockTerminationInstruction = 4;
  public static final int BranchEdge = 5;
  public static final int BranchInstruction = 6;
  public static final int Byte = 7;
  public static final int CallableDataKHR = 8;
  public static final int CallableDataNV = 9;
  public static final int ConstantInstruction = 10;
  public static final int ContinueEdge = 11;
  public static final int DebugInstruction = 12;
  public static final int Decoration = 13;
  public static final int EntryPoint = 14;
  public static final int ExecutionModeDeclaration = 15;
  public static final int FunctionTerminationInstruction = 16;
  public static final int HeaderBlock = 17;
  public static final int Id = 18;
  public static final int IncomingCallableDataKHR = 19;
  public static final int IncomingCallableDataNV = 20;
  public static final int Instruction = 21;
  public static final int Literal = 22;
  public static final int LoopHeader = 23;
  public static final int MemoryObject = 24;
  public static final int MemoryObjectDeclaration = 25;
  public static final int MergeBlock = 26;
  public static final int MergeEdge = 27;
  public static final int MergeInstruction = 28;
  public static final int Module = 29;
  public static final int NodeOutputPayloadAMDX = 30;
  public static final int NodePayloadAMDX = 31;
  public static final int NonSemanticInstruction = 32;
  public static final int NumericalName = 33;
  public static final int Object = 34;
  public static final int OpBranch = 35;
  public static final int OpBranchConditional = 36;
  public static final int OpCapability = 37;
  public static final int OpCode = 38;
  public static final int OpConstant = 39;
  public static final int OpConstantComposite = 40;
  public static final int OpConstantFalse = 41;
  public static final int OpConstantNull = 42;
  public static final int OpConstantSampler = 43;
  public static final int OpConstantTrue = 44;
  public static final int OpEntryPoint = 45;
  public static final int OpExecutionMode = 46;
  public static final int OpExecutionModeId = 47;
  public static final int OpExtInstImport = 48;
  public static final int OpExtension = 49;
  public static final int OpFunction = 50;
  public static final int OpFunctionCall = 51;
  public static final int OpFunctionEnd = 52;
  public static final int OpFunctionParameter = 53;
  public static final int OpKill = 54;
  public static final int OpLabel = 55;
  public static final int OpLoopMerge = 56;
  public static final int OpMemberName = 57;
  public static final int OpMemoryModel = 58;
  public static final int OpModuleProcessed = 59;
  public static final int OpName = 60;
  public static final int OpPhi = 61;
  public static final int OpPtrAccessChain = 62;
  public static final int OpReturn = 63;
  public static final int OpReturnValue = 64;
  public static final int OpSelecetionMerge = 65;
  public static final int OpSelect = 66;
  public static final int OpSource = 67;
  public static final int OpSourceContinued = 68;
  public static final int OpSourceExtension = 69;
  public static final int OpSpecConstant = 70;
  public static final int OpSpecConstantComposite = 71;
  public static final int OpSpecConstantOp = 72;
  public static final int OpString = 73;
  public static final int OpSwitch = 74;
  public static final int OpTerminateInvocation = 75;
  public static final int OpTypeBool = 76;
  public static final int OpTypeDeviceEvent = 77;
  public static final int OpTypeEvent = 78;
  public static final int OpTypeFloat = 79;
  public static final int OpTypeForwardPointer = 80;
  public static final int OpTypeImage = 81;
  public static final int OpTypeInt = 82;
  public static final int OpTypeMatrix = 83;
  public static final int OpTypeNamedBarrier = 84;
  public static final int OpTypeOpaque = 85;
  public static final int OpTypePipe = 86;
  public static final int OpTypePipeStorage = 87;
  public static final int OpTypePointer = 88;
  public static final int OpTypeQueue = 89;
  public static final int OpTypeReserveId = 90;
  public static final int OpTypeReverseId = 91;
  public static final int OpTypeSampledImage = 92;
  public static final int OpTypeSampler = 93;
  public static final int OpTypeVariable = 94;
  public static final int OpTypeVector = 95;
  public static final int OpTypeVoid = 96;
  public static final int OpUnreachable = 97;
  public static final int OpVariable = 98;
  public static final int Operand = 99;
  public static final int Path = 100;
  public static final int Result = 101;
  public static final int SelectionHeader = 102;
  public static final int StorageClass = 103;
  public static final int StorageClassAtomicCounter = 104;
  public static final int StorageClassBuffer = 105;
  public static final int StorageClassCrossWorkgroup = 106;
  public static final int StorageClassFunction = 107;
  public static final int StorageClassHitAttributeKHR = 108;
  public static final int StorageClassHitAttributeNV = 109;
  public static final int StorageClassImage = 110;
  public static final int StorageClassIncomingPayloadNV = 111;
  public static final int StorageClassIncomingRayPayloadKHR = 112;
  public static final int StorageClassInput = 113;
  public static final int StorageClassOutput = 114;
  public static final int StorageClassPrivate = 115;
  public static final int StorageClassPushConstant = 116;
  public static final int StorageClassRayPayloadKHR = 117;
  public static final int StorageClassRayPayloadNV = 118;
  public static final int StorageClassShaderRecordBufferKHR = 119;
  public static final int StorageClassShaderRecordBufferNV = 120;
  public static final int StorageClassTileImageEXT = 121;
  public static final int StorageClassUniform = 122;
  public static final int StorageClassUniformConstant = 123;
  public static final int StorageClassWorkgroup = 124;
  public static final int StructuredControlFlowEdge = 125;
  public static final int StructuredControlFlowPath = 126;
  public static final int Type = 127;
  public static final int TypeAbstract = 128;
  public static final int TypeAggregate = 129;
  public static final int TypeArray = 130;
  public static final int TypeBoolean = 131;
  public static final int TypeComposite = 132;
  public static final int TypeDeclaration = 133;
  public static final int TypeFloatingPoint = 134;
  public static final int TypeImage = 135;
  public static final int TypeInteger = 136;
  public static final int TypeLogicalointer = 137;
  public static final int TypeMatrix = 138;
  public static final int TypeNumerical = 139;
  public static final int TypeOpaque = 140;
  public static final int TypePhysicalPointer = 141;
  public static final int TypeSampler = 142;
  public static final int TypeScalar = 143;
  public static final int TypeStructure = 144;
  public static final int TypeVector = 145;
  public static final int VariablePointer = 146;
  public static final int WordCount = 147;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x4d403df5e7f84d28L, 0x822bebededfb9fefL);
    builder.put(0x1f77f80cb3b7a071L, AnnotationInstruction);
    builder.put(0x1f77f80cb3b77de5L, BackEdge);
    builder.put(0x1f77f80cb3b79f54L, BackEdgeBlock);
    builder.put(0x1f77f80cb3b6af5aL, Block);
    builder.put(0x1f77f80cb3b6af67L, BlockTerminationInstruction);
    builder.put(0x1f77f80cb3b77dc4L, BranchEdge);
    builder.put(0x1f77f80cb3b77dbfL, BranchInstruction);
    builder.put(0x1f77f80cb3b6afbeL, Byte);
    builder.put(0x4a02975cc3accfe8L, CallableDataKHR);
    builder.put(0x4a02975cc3accfeaL, CallableDataNV);
    builder.put(0x1f77f80cb3b6b000L, ConstantInstruction);
    builder.put(0x1f77f80cb3b77dd8L, ContinueEdge);
    builder.put(0x1f77f80cb3b79fafL, DebugInstruction);
    builder.put(0x1f77f80cb3b6aff8L, Decoration);
    builder.put(0x1f77f80cb3b6af58L, EntryPoint);
    builder.put(0x1f77f80cb3b79f97L, ExecutionModeDeclaration);
    builder.put(0x1f77f80cb3b6af5fL, FunctionTerminationInstruction);
    builder.put(0x1f77f80cb3b6af77L, HeaderBlock);
    builder.put(0x1f77f80cb3b6af96L, Id);
    builder.put(0x4a02975cc3accfecL, IncomingCallableDataKHR);
    builder.put(0x4a02975cc3accfeeL, IncomingCallableDataNV);
    builder.put(0x1f77f80cb3b6af5cL, Instruction);
    builder.put(0x1f77f80cb3b6afbcL, Literal);
    builder.put(0x1f77f80cb3b6af7bL, LoopHeader);
    builder.put(0x1f77f80cb3b6affcL, MemoryObject);
    builder.put(0x1f77f80cb3b6affeL, MemoryObjectDeclaration);
    builder.put(0x1f77f80cb3b6af83L, MergeBlock);
    builder.put(0x1f77f80cb3b77dd1L, MergeEdge);
    builder.put(0x1f77f80cb3b6af71L, MergeInstruction);
    builder.put(0x1f77f80cb3b65a3fL, Module);
    builder.put(0x4a02975cc3accfe6L, NodeOutputPayloadAMDX);
    builder.put(0x4a02975cc3accfe4L, NodePayloadAMDX);
    builder.put(0x1f77f80cb3b6b002L, NonSemanticInstruction);
    builder.put(0x1f77f80cb3b6afadL, NumericalName);
    builder.put(0x1f77f80cb3b6affaL, Object);
    builder.put(0x1f77f80cb3b6af69L, OpBranch);
    builder.put(0x1f77f80cb3b6af6dL, OpBranchConditional);
    builder.put(0x1f77f80cb3b6af90L, OpCapability);
    builder.put(0x1f77f80cb3b6afe2L, OpCode);
    builder.put(0x4a02975cc3ae1cc8L, OpConstant);
    builder.put(0x4a02975cc3ae1ccaL, OpConstantComposite);
    builder.put(0x4a02975cc3ae1ccfL, OpConstantFalse);
    builder.put(0x1f77f80cb3b6b053L, OpConstantNull);
    builder.put(0x4a02975cc3ae1cccL, OpConstantSampler);
    builder.put(0x4a02975cc3ae1cceL, OpConstantTrue);
    builder.put(0x1f77f80cb3b79f95L, OpEntryPoint);
    builder.put(0x1f77f80cb3b79f99L, OpExecutionMode);
    builder.put(0x1f77f80cb3b79f9aL, OpExecutionModeId);
    builder.put(0x1f77f80cb3b79f7bL, OpExtInstImport);
    builder.put(0x1f77f80cb3b79f6eL, OpExtension);
    builder.put(0x4a02975cc3ae1cd7L, OpFunction);
    builder.put(0x1f77f80cb3b6b04cL, OpFunctionCall);
    builder.put(0x4a02975cc3ae1cdbL, OpFunctionEnd);
    builder.put(0x4a02975cc3ae1cd9L, OpFunctionParameter);
    builder.put(0x1f77f80cb3b6af65L, OpKill);
    builder.put(0x1f77f80cb3b6af5dL, OpLabel);
    builder.put(0x1f77f80cb3b6af75L, OpLoopMerge);
    builder.put(0x1f77f80cb3b79fc1L, OpMemberName);
    builder.put(0x1f77f80cb3b79f8cL, OpMemoryModel);
    builder.put(0x1f77f80cb3b7a052L, OpModuleProcessed);
    builder.put(0x1f77f80cb3b79fc0L, OpName);
    builder.put(0x1f77f80cb3b6b04aL, OpPhi);
    builder.put(0x1f77f80cb3b6b04fL, OpPtrAccessChain);
    builder.put(0x1f77f80cb3b6b058L, OpReturn);
    builder.put(0x1f77f80cb3b6af63L, OpReturnValue);
    builder.put(0x1f77f80cb3b6af73L, OpSelecetionMerge);
    builder.put(0x1f77f80cb3b6b048L, OpSelect);
    builder.put(0x1f77f80cb3b79fbcL, OpSource);
    builder.put(0x1f77f80cb3b79fbeL, OpSourceContinued);
    builder.put(0x1f77f80cb3b79fbaL, OpSourceExtension);
    builder.put(0x4a02975cc3ae1cd1L, OpSpecConstant);
    builder.put(0x4a02975cc3ae1cd3L, OpSpecConstantComposite);
    builder.put(0x4a02975cc3ae1cd5L, OpSpecConstantOp);
    builder.put(0x1f77f80cb3b79fadL, OpString);
    builder.put(0x1f77f80cb3b6af6fL, OpSwitch);
    builder.put(0x1f77f80cb3b77dbdL, OpTerminateInvocation);
    builder.put(0x1f77f80cb3b6b021L, OpTypeBool);
    builder.put(0x1f77f80cb3b6b034L, OpTypeDeviceEvent);
    builder.put(0x1f77f80cb3b6b030L, OpTypeEvent);
    builder.put(0x4a02975cc3acd008L, OpTypeFloat);
    builder.put(0x1f77f80cb3b6b041L, OpTypeForwardPointer);
    builder.put(0x1f77f80cb3b6b028L, OpTypeImage);
    builder.put(0x4a02975cc3acd006L, OpTypeInt);
    builder.put(0x4a02975cc3acd00eL, OpTypeMatrix);
    builder.put(0x1f77f80cb3b6b046L, OpTypeNamedBarrier);
    builder.put(0x1f77f80cb3b6b02eL, OpTypeOpaque);
    builder.put(0x1f77f80cb3b6b03fL, OpTypePipe);
    builder.put(0x1f77f80cb3b6b043L, OpTypePipeStorage);
    builder.put(0x4a02975cc3acd00aL, OpTypePointer);
    builder.put(0x1f77f80cb3b6b03cL, OpTypeQueue);
    builder.put(0x1f77f80cb3b6b03aL, OpTypeReserveId);
    builder.put(0x1f77f80cb3b6b036L, OpTypeReverseId);
    builder.put(0x1f77f80cb3b6b02cL, OpTypeSampledImage);
    builder.put(0x1f77f80cb3b6b02aL, OpTypeSampler);
    builder.put(0x4a02975cc3acd012L, OpTypeVariable);
    builder.put(0x4a02975cc3acd00cL, OpTypeVector);
    builder.put(0x4a02975cc3accfa9L, OpTypeVoid);
    builder.put(0x1f77f80cb3b77dbbL, OpUnreachable);
    builder.put(0x4a02975cc3accfbeL, OpVariable);
    builder.put(0x1f77f80cb3b6afc2L, Operand);
    builder.put(0x1f77f80cb3b79f56L, Path);
    builder.put(0x1f77f80cb3b6afb7L, Result);
    builder.put(0x1f77f80cb3b6af80L, SelectionHeader);
    builder.put(0x4a02975cc3accfc0L, StorageClass);
    builder.put(0x4a02975cc3accfdcL, StorageClassAtomicCounter);
    builder.put(0x4a02975cc3accfe0L, StorageClassBuffer);
    builder.put(0x4a02975cc3accfd4L, StorageClassCrossWorkgroup);
    builder.put(0x4a02975cc3accfd8L, StorageClassFunction);
    builder.put(0x4a02975cc3accff6L, StorageClassHitAttributeKHR);
    builder.put(0x4a02975cc3accff8L, StorageClassHitAttributeNV);
    builder.put(0x4a02975cc3accfdeL, StorageClassImage);
    builder.put(0x4a02975cc3accfffL, StorageClassIncomingPayloadNV);
    builder.put(0x4a02975cc3accffcL, StorageClassIncomingRayPayloadKHR);
    builder.put(0x4a02975cc3accfcbL, StorageClassInput);
    builder.put(0x4a02975cc3accfd0L, StorageClassOutput);
    builder.put(0x4a02975cc3accfd6L, StorageClassPrivate);
    builder.put(0x4a02975cc3accfdaL, StorageClassPushConstant);
    builder.put(0x4a02975cc3accff0L, StorageClassRayPayloadKHR);
    builder.put(0x4a02975cc3accff2L, StorageClassRayPayloadNV);
    builder.put(0x4a02975cc3acd001L, StorageClassShaderRecordBufferKHR);
    builder.put(0x4a02975cc3acd004L, StorageClassShaderRecordBufferNV);
    builder.put(0x4a02975cc3accfe2L, StorageClassTileImageEXT);
    builder.put(0x4a02975cc3accfceL, StorageClassUniform);
    builder.put(0x4a02975cc3accfc2L, StorageClassUniformConstant);
    builder.put(0x4a02975cc3accfd2L, StorageClassWorkgroup);
    builder.put(0x1f77f80cb3b77de0L, StructuredControlFlowEdge);
    builder.put(0x1f77f80cb3b79f5aL, StructuredControlFlowPath);
    builder.put(0x1f77f80cb3b6b005L, Type);
    builder.put(0x1f77f80cb3b6b01eL, TypeAbstract);
    builder.put(0x1f77f80cb3b6b016L, TypeAggregate);
    builder.put(0x1f77f80cb3b6b013L, TypeArray);
    builder.put(0x1f77f80cb3b6b004L, TypeBoolean);
    builder.put(0x1f77f80cb3b6b018L, TypeComposite);
    builder.put(0x4a02975cc3accf96L, TypeDeclaration);
    builder.put(0x1f77f80cb3b6b009L, TypeFloatingPoint);
    builder.put(0x1f77f80cb3b6b01aL, TypeImage);
    builder.put(0x1f77f80cb3b6b007L, TypeInteger);
    builder.put(0x1f77f80cb3b6b023L, TypeLogicalointer);
    builder.put(0x1f77f80cb3b6b011L, TypeMatrix);
    builder.put(0x1f77f80cb3b6b00bL, TypeNumerical);
    builder.put(0x1f77f80cb3b6b026L, TypeOpaque);
    builder.put(0x1f77f80cb3b6b024L, TypePhysicalPointer);
    builder.put(0x1f77f80cb3b6b01cL, TypeSampler);
    builder.put(0x1f77f80cb3b6b00dL, TypeScalar);
    builder.put(0x1f77f80cb3b6b015L, TypeStructure);
    builder.put(0x1f77f80cb3b6b00fL, TypeVector);
    builder.put(0x1f77f80cb3b6b051L, VariablePointer);
    builder.put(0x1f77f80cb3b6afcaL, WordCount);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
